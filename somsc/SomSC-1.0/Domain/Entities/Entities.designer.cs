#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Com.Gt.SomSc.Domain.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SomSC")]
	public partial class SomScDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategoria(Categoria instance);
    partial void UpdateCategoria(Categoria instance);
    partial void DeleteCategoria(Categoria instance);
    partial void InsertCategoriasTags(CategoriasTags instance);
    partial void UpdateCategoriasTags(CategoriasTags instance);
    partial void DeleteCategoriasTags(CategoriasTags instance);
    partial void InsertFilial(Filial instance);
    partial void UpdateFilial(Filial instance);
    partial void DeleteFilial(Filial instance);
    partial void InsertFornecedor(Fornecedor instance);
    partial void UpdateFornecedor(Fornecedor instance);
    partial void DeleteFornecedor(Fornecedor instance);
    partial void InsertMovimento(Movimento instance);
    partial void UpdateMovimento(Movimento instance);
    partial void DeleteMovimento(Movimento instance);
    partial void InsertProduto(Produto instance);
    partial void UpdateProduto(Produto instance);
    partial void DeleteProduto(Produto instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertUnidade(Unidade instance);
    partial void UpdateUnidade(Unidade instance);
    partial void DeleteUnidade(Unidade instance);
    partial void InsertUsuario(Usuario instance);
    partial void UpdateUsuario(Usuario instance);
    partial void DeleteUsuario(Usuario instance);
    #endregion
		
		public SomScDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SomScDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SomScDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SomScDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Categoria> Categorias
		{
			get
			{
				return this.GetTable<Categoria>();
			}
		}
		
		public System.Data.Linq.Table<CategoriasTags> CategoriasTags
		{
			get
			{
				return this.GetTable<CategoriasTags>();
			}
		}
		
		public System.Data.Linq.Table<Filial> Filiais
		{
			get
			{
				return this.GetTable<Filial>();
			}
		}
		
		public System.Data.Linq.Table<Fornecedor> Fornecedores
		{
			get
			{
				return this.GetTable<Fornecedor>();
			}
		}
		
		public System.Data.Linq.Table<Movimento> Movimentos
		{
			get
			{
				return this.GetTable<Movimento>();
			}
		}
		
		public System.Data.Linq.Table<Produto> Produtos
		{
			get
			{
				return this.GetTable<Produto>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Unidade> Unidades
		{
			get
			{
				return this.GetTable<Unidade>();
			}
		}
		
		public System.Data.Linq.Table<Usuario> Usuarios
		{
			get
			{
				return this.GetTable<Usuario>();
			}
		}
	}
	
	[Table(Name="CATEGORIAS")]
	public partial class Categoria : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descricao;
		
		private EntitySet<CategoriasTags> _CATEGORIAS_TAGS;
		
		private EntitySet<Produto> _PRODUTOS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescricaoChanging(string value);
    partial void OnDescricaoChanged();
    #endregion
		
		public Categoria()
		{
			this._CATEGORIAS_TAGS = new EntitySet<CategoriasTags>(new Action<CategoriasTags>(this.attach_CATEGORIAS_TAGS), new Action<CategoriasTags>(this.detach_CATEGORIAS_TAGS));
			this._PRODUTOS = new EntitySet<Produto>(new Action<Produto>(this.attach_PRODUTOS), new Action<Produto>(this.detach_PRODUTOS));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descricao", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Descricao
		{
			get
			{
				return this._Descricao;
			}
			set
			{
				if ((this._Descricao != value))
				{
					this.OnDescricaoChanging(value);
					this.SendPropertyChanging();
					this._Descricao = value;
					this.SendPropertyChanged("Descricao");
					this.OnDescricaoChanged();
				}
			}
		}
		
		[Association(Name="Categoria_CategoriasTags", Storage="_CATEGORIAS_TAGS", ThisKey="Id", OtherKey="IdCategoria")]
		public EntitySet<CategoriasTags> CategoriasTags
		{
			get
			{
				return this._CATEGORIAS_TAGS;
			}
			set
			{
				this._CATEGORIAS_TAGS.Assign(value);
			}
		}
		
		[Association(Name="Categoria_Produto", Storage="_PRODUTOS", ThisKey="Id", OtherKey="IdCategoria")]
		public EntitySet<Produto> Produtos
		{
			get
			{
				return this._PRODUTOS;
			}
			set
			{
				this._PRODUTOS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CATEGORIAS_TAGS(CategoriasTags entity)
		{
			this.SendPropertyChanging();
			entity.Categoria = this;
		}
		
		private void detach_CATEGORIAS_TAGS(CategoriasTags entity)
		{
			this.SendPropertyChanging();
			entity.Categoria = null;
		}
		
		private void attach_PRODUTOS(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Categoria = this;
		}
		
		private void detach_PRODUTOS(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Categoria = null;
		}
	}
	
	[Table(Name="CATEGORIAS_TAGS")]
	public partial class CategoriasTags : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCategoria;
		
		private int _IdTag;
		
		private string _Valor;
		
		private EntityRef<Categoria> _CATEGORIAS;
		
		private EntityRef<Tag> _TAGS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategoriaChanging(int value);
    partial void OnIdCategoriaChanged();
    partial void OnIdTagChanging(int value);
    partial void OnIdTagChanged();
    partial void OnValorChanging(string value);
    partial void OnValorChanged();
    #endregion
		
		public CategoriasTags()
		{
			this._CATEGORIAS = default(EntityRef<Categoria>);
			this._TAGS = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[Column(Storage="_IdCategoria", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdCategoria
		{
			get
			{
				return this._IdCategoria;
			}
			set
			{
				if ((this._IdCategoria != value))
				{
					if (this._CATEGORIAS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoriaChanging(value);
					this.SendPropertyChanging();
					this._IdCategoria = value;
					this.SendPropertyChanged("IdCategoria");
					this.OnIdCategoriaChanged();
				}
			}
		}
		
		[Column(Storage="_IdTag", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdTag
		{
			get
			{
				return this._IdTag;
			}
			set
			{
				if ((this._IdTag != value))
				{
					if (this._TAGS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTagChanging(value);
					this.SendPropertyChanging();
					this._IdTag = value;
					this.SendPropertyChanged("IdTag");
					this.OnIdTagChanged();
				}
			}
		}
		
		[Column(Storage="_Valor", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Valor
		{
			get
			{
				return this._Valor;
			}
			set
			{
				if ((this._Valor != value))
				{
					this.OnValorChanging(value);
					this.SendPropertyChanging();
					this._Valor = value;
					this.SendPropertyChanged("Valor");
					this.OnValorChanged();
				}
			}
		}
		
		[Association(Name="Categoria_CategoriasTags", Storage="_CATEGORIAS", ThisKey="IdCategoria", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Categoria Categoria
		{
			get
			{
				return this._CATEGORIAS.Entity;
			}
			set
			{
				Categoria previousValue = this._CATEGORIAS.Entity;
				if (((previousValue != value) 
							|| (this._CATEGORIAS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CATEGORIAS.Entity = null;
						previousValue.CategoriasTags.Remove(this);
					}
					this._CATEGORIAS.Entity = value;
					if ((value != null))
					{
						value.CategoriasTags.Add(this);
						this._IdCategoria = value.Id;
					}
					else
					{
						this._IdCategoria = default(int);
					}
					this.SendPropertyChanged("Categoria");
				}
			}
		}
		
		[Association(Name="Tag_CategoriasTags", Storage="_TAGS", ThisKey="IdTag", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Tag Tag
		{
			get
			{
				return this._TAGS.Entity;
			}
			set
			{
				Tag previousValue = this._TAGS.Entity;
				if (((previousValue != value) 
							|| (this._TAGS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TAGS.Entity = null;
						previousValue.CategoriasTags.Remove(this);
					}
					this._TAGS.Entity = value;
					if ((value != null))
					{
						value.CategoriasTags.Add(this);
						this._IdTag = value.Id;
					}
					else
					{
						this._IdTag = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="FILIAIS")]
	public partial class Filial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private EntitySet<Movimento> _MOVIMENTOS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public Filial()
		{
			this._MOVIMENTOS = new EntitySet<Movimento>(new Action<Movimento>(this.attach_MOVIMENTOS), new Action<Movimento>(this.detach_MOVIMENTOS));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nome", DbType="NVarChar(100)")]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[Association(Name="Filial_Movimento", Storage="_MOVIMENTOS", ThisKey="Id", OtherKey="IdFilial")]
		public EntitySet<Movimento> Movimentos
		{
			get
			{
				return this._MOVIMENTOS;
			}
			set
			{
				this._MOVIMENTOS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MOVIMENTOS(Movimento entity)
		{
			this.SendPropertyChanging();
			entity.Filial = this;
		}
		
		private void detach_MOVIMENTOS(Movimento entity)
		{
			this.SendPropertyChanging();
			entity.Filial = null;
		}
	}
	
	[Table(Name="FORNECEDORES")]
	public partial class Fornecedor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _RazaoSocial;
		
		private bool _Ativo;
		
		private EntitySet<Produto> _PRODUTOS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRazaoSocialChanging(string value);
    partial void OnRazaoSocialChanged();
    partial void OnAtivoChanging(bool value);
    partial void OnAtivoChanged();
    #endregion
		
		public Fornecedor()
		{
			this._PRODUTOS = new EntitySet<Produto>(new Action<Produto>(this.attach_PRODUTOS), new Action<Produto>(this.detach_PRODUTOS));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_RazaoSocial", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RazaoSocial
		{
			get
			{
				return this._RazaoSocial;
			}
			set
			{
				if ((this._RazaoSocial != value))
				{
					this.OnRazaoSocialChanging(value);
					this.SendPropertyChanging();
					this._RazaoSocial = value;
					this.SendPropertyChanged("RazaoSocial");
					this.OnRazaoSocialChanged();
				}
			}
		}
		
		[Column(Storage="_Ativo", DbType="Bit NOT NULL")]
		public bool Ativo
		{
			get
			{
				return this._Ativo;
			}
			set
			{
				if ((this._Ativo != value))
				{
					this.OnAtivoChanging(value);
					this.SendPropertyChanging();
					this._Ativo = value;
					this.SendPropertyChanged("Ativo");
					this.OnAtivoChanged();
				}
			}
		}
		
		[Association(Name="Fornecedor_Produto", Storage="_PRODUTOS", ThisKey="Id", OtherKey="IdFornecedor")]
		public EntitySet<Produto> Produtos
		{
			get
			{
				return this._PRODUTOS;
			}
			set
			{
				this._PRODUTOS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRODUTOS(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Fornecedor = this;
		}
		
		private void detach_PRODUTOS(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Fornecedor = null;
		}
	}
	
	[Table(Name="MOVIMENTOS")]
	public partial class Movimento : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdUsuario;
		
		private int _IdProduto;
		
		private int _IdFilial;
		
		private System.DateTime _Data;
		
		private double _Quantidade;
		
		private string _Observacoes;
		
		private EntityRef<Usuario> _USUARIOS;
		
		private EntityRef<Produto> _PRODUTOS;
		
		private EntityRef<Filial> _FILIAIS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdUsuarioChanging(int value);
    partial void OnIdUsuarioChanged();
    partial void OnIdProdutoChanging(int value);
    partial void OnIdProdutoChanged();
    partial void OnIdFilialChanging(int value);
    partial void OnIdFilialChanged();
    partial void OnDataChanging(System.DateTime value);
    partial void OnDataChanged();
    partial void OnQuantidadeChanging(double value);
    partial void OnQuantidadeChanged();
    partial void OnObservacoesChanging(string value);
    partial void OnObservacoesChanged();
    #endregion
		
		public Movimento()
		{
			this._USUARIOS = default(EntityRef<Usuario>);
			this._PRODUTOS = default(EntityRef<Produto>);
			this._FILIAIS = default(EntityRef<Filial>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdUsuario", DbType="Int NOT NULL")]
		public int IdUsuario
		{
			get
			{
				return this._IdUsuario;
			}
			set
			{
				if ((this._IdUsuario != value))
				{
					if (this._USUARIOS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUsuarioChanging(value);
					this.SendPropertyChanging();
					this._IdUsuario = value;
					this.SendPropertyChanged("IdUsuario");
					this.OnIdUsuarioChanged();
				}
			}
		}
		
		[Column(Storage="_IdProduto", DbType="Int NOT NULL")]
		public int IdProduto
		{
			get
			{
				return this._IdProduto;
			}
			set
			{
				if ((this._IdProduto != value))
				{
					if (this._PRODUTOS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProdutoChanging(value);
					this.SendPropertyChanging();
					this._IdProduto = value;
					this.SendPropertyChanged("IdProduto");
					this.OnIdProdutoChanged();
				}
			}
		}
		
		[Column(Storage="_IdFilial", DbType="Int NOT NULL")]
		public int IdFilial
		{
			get
			{
				return this._IdFilial;
			}
			set
			{
				if ((this._IdFilial != value))
				{
					if (this._FILIAIS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdFilialChanging(value);
					this.SendPropertyChanging();
					this._IdFilial = value;
					this.SendPropertyChanged("IdFilial");
					this.OnIdFilialChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="DateTime NOT NULL")]
		public System.DateTime Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Storage="_Quantidade", DbType="Float NOT NULL")]
		public double Quantidade
		{
			get
			{
				return this._Quantidade;
			}
			set
			{
				if ((this._Quantidade != value))
				{
					this.OnQuantidadeChanging(value);
					this.SendPropertyChanging();
					this._Quantidade = value;
					this.SendPropertyChanged("Quantidade");
					this.OnQuantidadeChanged();
				}
			}
		}
		
		[Column(Storage="_Observacoes", DbType="NVarChar(1000)")]
		public string Observacoes
		{
			get
			{
				return this._Observacoes;
			}
			set
			{
				if ((this._Observacoes != value))
				{
					this.OnObservacoesChanging(value);
					this.SendPropertyChanging();
					this._Observacoes = value;
					this.SendPropertyChanged("Observacoes");
					this.OnObservacoesChanged();
				}
			}
		}
		
		[Association(Name="Usuario_Movimento", Storage="_USUARIOS", ThisKey="IdUsuario", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Usuario Usuario
		{
			get
			{
				return this._USUARIOS.Entity;
			}
			set
			{
				Usuario previousValue = this._USUARIOS.Entity;
				if (((previousValue != value) 
							|| (this._USUARIOS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USUARIOS.Entity = null;
						previousValue.Movimentos.Remove(this);
					}
					this._USUARIOS.Entity = value;
					if ((value != null))
					{
						value.Movimentos.Add(this);
						this._IdUsuario = value.Id;
					}
					else
					{
						this._IdUsuario = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		[Association(Name="Produto_Movimento", Storage="_PRODUTOS", ThisKey="IdProduto", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Produto Produto
		{
			get
			{
				return this._PRODUTOS.Entity;
			}
			set
			{
				Produto previousValue = this._PRODUTOS.Entity;
				if (((previousValue != value) 
							|| (this._PRODUTOS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUTOS.Entity = null;
						previousValue.Movimentos.Remove(this);
					}
					this._PRODUTOS.Entity = value;
					if ((value != null))
					{
						value.Movimentos.Add(this);
						this._IdProduto = value.Id;
					}
					else
					{
						this._IdProduto = default(int);
					}
					this.SendPropertyChanged("Produto");
				}
			}
		}
		
		[Association(Name="Filial_Movimento", Storage="_FILIAIS", ThisKey="IdFilial", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Filial Filial
		{
			get
			{
				return this._FILIAIS.Entity;
			}
			set
			{
				Filial previousValue = this._FILIAIS.Entity;
				if (((previousValue != value) 
							|| (this._FILIAIS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FILIAIS.Entity = null;
						previousValue.Movimentos.Remove(this);
					}
					this._FILIAIS.Entity = value;
					if ((value != null))
					{
						value.Movimentos.Add(this);
						this._IdFilial = value.Id;
					}
					else
					{
						this._IdFilial = default(int);
					}
					this.SendPropertyChanged("Filial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="PRODUTOS")]
	public partial class Produto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdCategoria;
		
		private int _IdUnidade;
		
		private int _IdFornecedor;
		
		private string _Codigo;
		
		private string _Descricao;
		
		private System.Nullable<decimal> _PrecoCusto;
		
		private bool _Ativo;
		
		private double _Critico;
		
		private EntitySet<Movimento> _MOVIMENTOS;
		
		private EntityRef<Fornecedor> _FORNECEDORES;
		
		private EntityRef<Categoria> _CATEGORIAS;
		
		private EntityRef<Unidade> _UNIDADES;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdCategoriaChanging(int value);
    partial void OnIdCategoriaChanged();
    partial void OnIdUnidadeChanging(int value);
    partial void OnIdUnidadeChanged();
    partial void OnIdFornecedorChanging(int value);
    partial void OnIdFornecedorChanged();
    partial void OnCodigoChanging(string value);
    partial void OnCodigoChanged();
    partial void OnDescricaoChanging(string value);
    partial void OnDescricaoChanged();
    partial void OnPrecoCustoChanging(System.Nullable<decimal> value);
    partial void OnPrecoCustoChanged();
    partial void OnAtivoChanging(bool value);
    partial void OnAtivoChanged();
    partial void OnCriticoChanging(double value);
    partial void OnCriticoChanged();
    #endregion
		
		public Produto()
		{
			this._MOVIMENTOS = new EntitySet<Movimento>(new Action<Movimento>(this.attach_MOVIMENTOS), new Action<Movimento>(this.detach_MOVIMENTOS));
			this._FORNECEDORES = default(EntityRef<Fornecedor>);
			this._CATEGORIAS = default(EntityRef<Categoria>);
			this._UNIDADES = default(EntityRef<Unidade>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdCategoria", DbType="Int NOT NULL")]
		public int IdCategoria
		{
			get
			{
				return this._IdCategoria;
			}
			set
			{
				if ((this._IdCategoria != value))
				{
					if (this._CATEGORIAS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategoriaChanging(value);
					this.SendPropertyChanging();
					this._IdCategoria = value;
					this.SendPropertyChanged("IdCategoria");
					this.OnIdCategoriaChanged();
				}
			}
		}
		
		[Column(Storage="_IdUnidade", DbType="Int NOT NULL")]
		public int IdUnidade
		{
			get
			{
				return this._IdUnidade;
			}
			set
			{
				if ((this._IdUnidade != value))
				{
					if (this._UNIDADES.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUnidadeChanging(value);
					this.SendPropertyChanging();
					this._IdUnidade = value;
					this.SendPropertyChanged("IdUnidade");
					this.OnIdUnidadeChanged();
				}
			}
		}
		
		[Column(Storage="_IdFornecedor", DbType="Int NOT NULL")]
		public int IdFornecedor
		{
			get
			{
				return this._IdFornecedor;
			}
			set
			{
				if ((this._IdFornecedor != value))
				{
					if (this._FORNECEDORES.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdFornecedorChanging(value);
					this.SendPropertyChanging();
					this._IdFornecedor = value;
					this.SendPropertyChanged("IdFornecedor");
					this.OnIdFornecedorChanged();
				}
			}
		}
		
		[Column(Storage="_Codigo", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[Column(Storage="_Descricao", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Descricao
		{
			get
			{
				return this._Descricao;
			}
			set
			{
				if ((this._Descricao != value))
				{
					this.OnDescricaoChanging(value);
					this.SendPropertyChanging();
					this._Descricao = value;
					this.SendPropertyChanged("Descricao");
					this.OnDescricaoChanged();
				}
			}
		}
		
		[Column(Storage="_PrecoCusto", DbType="Money")]
		public System.Nullable<decimal> PrecoCusto
		{
			get
			{
				return this._PrecoCusto;
			}
			set
			{
				if ((this._PrecoCusto != value))
				{
					this.OnPrecoCustoChanging(value);
					this.SendPropertyChanging();
					this._PrecoCusto = value;
					this.SendPropertyChanged("PrecoCusto");
					this.OnPrecoCustoChanged();
				}
			}
		}
		
		[Column(Storage="_Ativo", DbType="Bit NOT NULL")]
		public bool Ativo
		{
			get
			{
				return this._Ativo;
			}
			set
			{
				if ((this._Ativo != value))
				{
					this.OnAtivoChanging(value);
					this.SendPropertyChanging();
					this._Ativo = value;
					this.SendPropertyChanged("Ativo");
					this.OnAtivoChanged();
				}
			}
		}
		
		[Column(Storage="_Critico", DbType="Float NOT NULL")]
		public double Critico
		{
			get
			{
				return this._Critico;
			}
			set
			{
				if ((this._Critico != value))
				{
					this.OnCriticoChanging(value);
					this.SendPropertyChanging();
					this._Critico = value;
					this.SendPropertyChanged("Critico");
					this.OnCriticoChanged();
				}
			}
		}
		
		[Association(Name="Produto_Movimento", Storage="_MOVIMENTOS", ThisKey="Id", OtherKey="IdProduto")]
		public EntitySet<Movimento> Movimentos
		{
			get
			{
				return this._MOVIMENTOS;
			}
			set
			{
				this._MOVIMENTOS.Assign(value);
			}
		}
		
		[Association(Name="Fornecedor_Produto", Storage="_FORNECEDORES", ThisKey="IdFornecedor", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Fornecedor Fornecedor
		{
			get
			{
				return this._FORNECEDORES.Entity;
			}
			set
			{
				Fornecedor previousValue = this._FORNECEDORES.Entity;
				if (((previousValue != value) 
							|| (this._FORNECEDORES.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FORNECEDORES.Entity = null;
						previousValue.Produtos.Remove(this);
					}
					this._FORNECEDORES.Entity = value;
					if ((value != null))
					{
						value.Produtos.Add(this);
						this._IdFornecedor = value.Id;
					}
					else
					{
						this._IdFornecedor = default(int);
					}
					this.SendPropertyChanged("Fornecedor");
				}
			}
		}
		
		[Association(Name="Categoria_Produto", Storage="_CATEGORIAS", ThisKey="IdCategoria", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Categoria Categoria
		{
			get
			{
				return this._CATEGORIAS.Entity;
			}
			set
			{
				Categoria previousValue = this._CATEGORIAS.Entity;
				if (((previousValue != value) 
							|| (this._CATEGORIAS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CATEGORIAS.Entity = null;
						previousValue.Produtos.Remove(this);
					}
					this._CATEGORIAS.Entity = value;
					if ((value != null))
					{
						value.Produtos.Add(this);
						this._IdCategoria = value.Id;
					}
					else
					{
						this._IdCategoria = default(int);
					}
					this.SendPropertyChanged("Categoria");
				}
			}
		}
		
		[Association(Name="Unidade_Produto", Storage="_UNIDADES", ThisKey="IdUnidade", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Unidade Unidade
		{
			get
			{
				return this._UNIDADES.Entity;
			}
			set
			{
				Unidade previousValue = this._UNIDADES.Entity;
				if (((previousValue != value) 
							|| (this._UNIDADES.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UNIDADES.Entity = null;
						previousValue.Produtos.Remove(this);
					}
					this._UNIDADES.Entity = value;
					if ((value != null))
					{
						value.Produtos.Add(this);
						this._IdUnidade = value.Id;
					}
					else
					{
						this._IdUnidade = default(int);
					}
					this.SendPropertyChanged("Unidade");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MOVIMENTOS(Movimento entity)
		{
			this.SendPropertyChanging();
			entity.Produto = this;
		}
		
		private void detach_MOVIMENTOS(Movimento entity)
		{
			this.SendPropertyChanging();
			entity.Produto = null;
		}
	}
	
	[Table(Name="TAGS")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdUnidade;
		
		private string _Nome;
		
		private EntitySet<CategoriasTags> _CATEGORIAS_TAGS;
		
		private EntityRef<Unidade> _UNIDADES;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdUnidadeChanging(int value);
    partial void OnIdUnidadeChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public Tag()
		{
			this._CATEGORIAS_TAGS = new EntitySet<CategoriasTags>(new Action<CategoriasTags>(this.attach_CATEGORIAS_TAGS), new Action<CategoriasTags>(this.detach_CATEGORIAS_TAGS));
			this._UNIDADES = default(EntityRef<Unidade>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdUnidade", DbType="Int NOT NULL")]
		public int IdUnidade
		{
			get
			{
				return this._IdUnidade;
			}
			set
			{
				if ((this._IdUnidade != value))
				{
					if (this._UNIDADES.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUnidadeChanging(value);
					this.SendPropertyChanging();
					this._IdUnidade = value;
					this.SendPropertyChanged("IdUnidade");
					this.OnIdUnidadeChanged();
				}
			}
		}
		
		[Column(Storage="_Nome", DbType="NVarChar(50)")]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[Association(Name="Tag_CategoriasTags", Storage="_CATEGORIAS_TAGS", ThisKey="Id", OtherKey="IdTag")]
		public EntitySet<CategoriasTags> CategoriasTags
		{
			get
			{
				return this._CATEGORIAS_TAGS;
			}
			set
			{
				this._CATEGORIAS_TAGS.Assign(value);
			}
		}
		
		[Association(Name="Unidade_Tag", Storage="_UNIDADES", ThisKey="IdUnidade", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Unidade Unidade
		{
			get
			{
				return this._UNIDADES.Entity;
			}
			set
			{
				Unidade previousValue = this._UNIDADES.Entity;
				if (((previousValue != value) 
							|| (this._UNIDADES.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UNIDADES.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._UNIDADES.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._IdUnidade = value.Id;
					}
					else
					{
						this._IdUnidade = default(int);
					}
					this.SendPropertyChanged("Unidade");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CATEGORIAS_TAGS(CategoriasTags entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_CATEGORIAS_TAGS(CategoriasTags entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[Table(Name="UNIDADES")]
	public partial class Unidade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Simbolo;
		
		private string _Descricao;
		
		private byte _Casas;
		
		private EntitySet<Produto> _PRODUTOS;
		
		private EntitySet<Tag> _TAGS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSimboloChanging(string value);
    partial void OnSimboloChanged();
    partial void OnDescricaoChanging(string value);
    partial void OnDescricaoChanged();
    partial void OnCasasChanging(byte value);
    partial void OnCasasChanged();
    #endregion
		
		public Unidade()
		{
			this._PRODUTOS = new EntitySet<Produto>(new Action<Produto>(this.attach_PRODUTOS), new Action<Produto>(this.detach_PRODUTOS));
			this._TAGS = new EntitySet<Tag>(new Action<Tag>(this.attach_TAGS), new Action<Tag>(this.detach_TAGS));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Simbolo", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Simbolo
		{
			get
			{
				return this._Simbolo;
			}
			set
			{
				if ((this._Simbolo != value))
				{
					this.OnSimboloChanging(value);
					this.SendPropertyChanging();
					this._Simbolo = value;
					this.SendPropertyChanged("Simbolo");
					this.OnSimboloChanged();
				}
			}
		}
		
		[Column(Storage="_Descricao", DbType="NVarChar(50)")]
		public string Descricao
		{
			get
			{
				return this._Descricao;
			}
			set
			{
				if ((this._Descricao != value))
				{
					this.OnDescricaoChanging(value);
					this.SendPropertyChanging();
					this._Descricao = value;
					this.SendPropertyChanged("Descricao");
					this.OnDescricaoChanged();
				}
			}
		}
		
		[Column(Storage="_Casas", DbType="TinyInt")]
		public byte Casas
		{
			get
			{
				return this._Casas;
			}
			set
			{
				if ((this._Casas != value))
				{
					this.OnCasasChanging(value);
					this.SendPropertyChanging();
					this._Casas = value;
					this.SendPropertyChanged("Casas");
					this.OnCasasChanged();
				}
			}
		}
		
		[Association(Name="Unidade_Produto", Storage="_PRODUTOS", ThisKey="Id", OtherKey="IdUnidade")]
		public EntitySet<Produto> Produtos
		{
			get
			{
				return this._PRODUTOS;
			}
			set
			{
				this._PRODUTOS.Assign(value);
			}
		}
		
		[Association(Name="Unidade_Tag", Storage="_TAGS", ThisKey="Id", OtherKey="IdUnidade")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._TAGS;
			}
			set
			{
				this._TAGS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRODUTOS(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Unidade = this;
		}
		
		private void detach_PRODUTOS(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Unidade = null;
		}
		
		private void attach_TAGS(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Unidade = this;
		}
		
		private void detach_TAGS(Tag entity)
		{
			this.SendPropertyChanging();
			entity.Unidade = null;
		}
	}
	
	[Table(Name="USUARIOS")]
	public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private string _Apelido;
		
		private string _Senha;
		
		private bool _Ativo;
		
		private EntitySet<Movimento> _MOVIMENTOS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnApelidoChanging(string value);
    partial void OnApelidoChanged();
    partial void OnSenhaChanging(string value);
    partial void OnSenhaChanged();
    partial void OnAtivoChanging(bool value);
    partial void OnAtivoChanged();
    #endregion
		
		public Usuario()
		{
			this._MOVIMENTOS = new EntitySet<Movimento>(new Action<Movimento>(this.attach_MOVIMENTOS), new Action<Movimento>(this.detach_MOVIMENTOS));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nome", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[Column(Storage="_Apelido", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Apelido
		{
			get
			{
				return this._Apelido;
			}
			set
			{
				if ((this._Apelido != value))
				{
					this.OnApelidoChanging(value);
					this.SendPropertyChanging();
					this._Apelido = value;
					this.SendPropertyChanged("Apelido");
					this.OnApelidoChanged();
				}
			}
		}
		
		[Column(Storage="_Senha", DbType="NVarChar(100)", CanBeNull=false)]
		public string Senha
		{
			get
			{
				return this._Senha;
			}
			set
			{
				if ((this._Senha != value))
				{
					this.OnSenhaChanging(value);
					this.SendPropertyChanging();
					this._Senha = value;
					this.SendPropertyChanged("Senha");
					this.OnSenhaChanged();
				}
			}
		}
		
		[Column(Storage="_Ativo", DbType="Bit NOT NULL")]
		public bool Ativo
		{
			get
			{
				return this._Ativo;
			}
			set
			{
				if ((this._Ativo != value))
				{
					this.OnAtivoChanging(value);
					this.SendPropertyChanging();
					this._Ativo = value;
					this.SendPropertyChanged("Ativo");
					this.OnAtivoChanged();
				}
			}
		}
		
		[Association(Name="Usuario_Movimento", Storage="_MOVIMENTOS", ThisKey="Id", OtherKey="IdUsuario")]
		public EntitySet<Movimento> Movimentos
		{
			get
			{
				return this._MOVIMENTOS;
			}
			set
			{
				this._MOVIMENTOS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MOVIMENTOS(Movimento entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_MOVIMENTOS(Movimento entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
	}
}
#pragma warning restore 1591
